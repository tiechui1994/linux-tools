#!/bin/bash

#----------------------------------------------------
# File: upstart.sh
# Contents: upstart.sh
# Date: 19-5-26
#----------------------------------------------------

#---------------------------------------------------------------------------------------------------
# Upstart
#
# Upstart 基于事件机制, 比如U盘插入USB接口后, udev得到内核通知, 发现该设备, 这就是一个新的事件. Upstart在感知该事件
# 之后触发相应的等待任务, 比如处理/etc/fstab中存在的挂载点. 采用这种事件驱动从模式, Upstart完美地解决了即插即用设备带
# 来的新的问题.
#
# 此外, 采用事件驱动机制带来了其他有益的变化, 比如加快的系统启动时间. Sysvinit 运行是同步阻塞的. 一个脚本运行的时候,
# 后续脚本必须等待. 这意味着所有初始化步骤都是串行执行的, 而实际上很多服务彼此并不相关, 完全可以并行启动, 从而减小系统的
# 启动时间.
#
# Chrome OS 使用的是Upstart
#
# Debian7 使用的是 Upstart; Debian8 开始使用 Systemd
#
# Ubuntu 12.04, 14.04, 14.10 使用的是Upstart; Ubuntu 15.04开始使用Systemd
#
# Fedora9 开始使用Upstart; Fedora15 开始使用Systemd
#
# RHEL6 使用Upstart; RHEL7 开始使用Systemd
#
# openSUSE12.1 开始使用Systemd.
#
#
#
# Upstart的特点
#
# Upstart解决了Sysvinit的缺点. 采用事件驱动模型, Upstart可以:
# - 更快地启动系统
# - 当硬件被发现时动态启动服务
# - 硬件被拔除时动态停止服务
#
#---------------------------------------------------------------------------------------------------


#---------------------------------------------------------------------------------------------------
# Upstart概念和术语
#
# Upstart主要的概念是job和event. Job是一个工作单元, 用来完成一件工作, 比如启动一个后台服务, 或者运行一个配置命令. 每
# 个Job都等待一个或多个事件, 一旦事件发生, Upstart就会触发该Job完成相应的工作.
#
#
# Job
#
# Job就是一个工作的单元, 一个任务或者一个服务. 可以理解为Sysvinit中的一个服务脚本. 有三种类型的Job:
# - task job
# - service job
# - abstract job
#
# task job 代表在一定时间内会执行完毕的任务, 比如删除一个文件;
#
# service job 代表后台服务进程, 比如nginx. 这里进程一般不会退出, 一旦开始运行就成为一个后台进程, 由init进程管理, 如
# 果这类进程退出, 由init进程重新启动, 它们只能由init进程发送信号停止. 它们的停止一般也是由于所依赖的停止事件而触发的,不
# 过Upstart也提供命令行工具
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#---------------------------------------------------------------------------------------------------